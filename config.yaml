passwd:
  users:
  - name: joe
    ssh_authorized_keys:
    - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHe1rqfRxNvymvZgyqIeXh6ZNWw/KWNGooCeB6BU5Cn8CBqdQ3kHYdSJBWZHEI6+qZ/cmtySbarzIyC2SPRR1qZ6KAKhEeAKH93e6ttkv5anUZVHOrMVJFpHipJ/+ZRhrpAE7F6z3W9wigWR7q1Xn1j+aD5s9HJh7jMRBZEG9+GFcNHmtAxgIH2zuOuDGviv1p1PG1ZDU4iWPo0rXDNXMywXIgEWOett+P6hJdIL3ZPzHVV/g84q/G1nNFfm+xnz1kwOMblwC27PzbDgGd1rnh73QSzcSKwfRRk2UBnAjFmkfZtJhLb3hfkY40nRawSG3+RLy8KHPvKy0RyESSxAd6kgDjT/tb9nK6dRvO1CHcKpUBd7DNUaIRGE7VfgyEJtRo+acwMTXZId+abPiFuoRzO2QSUmz+0MfWWh/XrREuavQ7yrL93oS4W5LjwZRI5ldZ55OOG5ffFzZRdThb2khiRdJdG4yaJS+5iiiBbG6+vJps5Fyhor7rASKEkWpQCmnRuH1ZadMP80wDkmXrDk/rUinGC5HkZVqA2SPm30lx+7TJLyb9fDFIbkd2LoOKHtSEV/P59B7yayrERR6wmoItVLu1ET0tux6DEtF4Qf8c+KhmMWgGnCYr6PL/WNO4NNU0DohAs/g3RxHw2F5S9xQUIxoWMs8dUIxkSLkA0POISQ=="
    groups: ["sudo", "docker"]

storage:
  files:
  - filesystem: "root"
    path: "/etc/hostname"
    mode: 0644
    contents:
      inline: "vm"

  - filesystem: "root"
    path: "/etc/resolv.conf"
    mode: 0644
    contents:
      inline: |
        nameserver 10.0.253.1
        nameserver 8.8.8.8

  - filesystem: "root"
    path: "/home/joe/.bashrc"
    mode: 0644
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        if [ -f ~/.bash_aliases ]; then
            source /home/joe/.bash_aliases
        fi

        function prompt_command {
            EXIT_CODE=$?
            EXIT_PHRASE=''
            if [ $EXIT_CODE -ne 0 ]; then
                EXIT_PHRASE="$EXIT_CODE-"
            fi
            export PS1="$EXIT_PHRASE\\$ "
        }

        function access {
            local installation=""
            local cluster_id=""

            if [ "$#" -eq 1 ]; then
                installation=$1
            fi
            if [ "$#" -eq 2 ]; then
                installation=$1
                cluster_id=$2
            fi
            if [ "$#" -eq 3 ]; then
                installation=$1
                cluster_id=$3
            fi

            if [ ! -z "$installation" ] && [ -z "$cluster_id" ]; then
                if kubectl config use-context "giantswarm-$installation" >/dev/null 2>/dev/null; then
                     return
                fi

                opsctl create kubeconfig --cluster "$installation" >/dev/null 2>/dev/null
                return
            fi
            if [ ! -z "$installation" ] && [ ! -z "$cluster_id" ]; then
                if kubectl config use-context "giantswarm-$cluster_id" >/dev/null 2>/dev/null; then
                     return
                fi

                gsctl create kubeconfig \
                    --endpoint "$installation" \
                    --cluster "$cluster_id" \
                    --certificate-organizations system:masters \
                    --ttl 1d >/dev/null 2>/dev/null
                return
             fi
        }

        function fetch {
            mkdir /go/src/github.com/$1/;
            cd /go/src/github.com/$1/;
            git clone https://github.com/$1/$2;
            cd /go/src/github.com/$1/$2;
        }

        function wl {
            prev=$(history | cut -c 8- | tail -n 2 | head -n 1)
            prev_command=$(echo $prev | awk '{print $1}')
            prev_arguments=$(echo $prev | awk '{$1=""; print $0}')

            if alias "$prev_command" > /dev/null; then
                prev_command=$(alias "$prev_command" | awk -F "'" '{print $2}')
            fi

            watch --color --differences "$prev_command$prev_arguments"
        }

        set -o vi

        chmod 400 /secrets/*

        export GPG_TTY=$(tty)
        export PROMPT_COMMAND=prompt_command
        export TERM=xterm

        export OPSCTL_GITHUB_TOKEN=$(cat /secrets/opsctl-github-token)
        export OPSCTL_GPG_PASSWORD=$(cat /secrets/opsctl-gpg-password)
        export OPSCTL_OPSGENIE_TOKEN=$(cat /secrets/opsctl-opsgenie-token)

        export PATH="/go/src/github.com/giantswarm/gsctl/:$PATH"
        export PATH="/go/src/github.com/giantswarm/opsctl/:$PATH"

        eval `ssh-agent -s` > /dev/null 2>&1
        ssh-add /secrets/giantswarm-rsa > /dev/null 2>&1
        if ! gpg --list-keys 2>&1 | grep -q 'salisbury.joseph@gmail.com' ; then
            gpg --import /secrets/private-gpg > /dev/null 2>&1
            gpg --import /secrets/public-gpg > /dev/null 2>&1
        fi

        if [ ! -f ~/.config/gsctl/config.yaml ]; then
            mkdir -p ~/.config/gsctl/
            cp /secrets/gsctl-config.yaml ~/.config/gsctl/config.yaml
            chmod 600 ~/.config/gsctl/config.yaml
        fi

        while [ ! -f /opt/bin/tmux ]; do echo "waiting for tmux..."; sleep 5; done
        [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && exec tmux new-session -A -s default

  - filesystem: "root"
    path: "/home/joe/.bash_aliases"
    mode: 0644
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        alias go='docker run -ti --rm -v /go:/go/ -v /tmp/go-cache:/root/.cache/go-build/ -w $(pwd) golang go'
        alias k='kubectl'
        alias ls='ls -FGlh --color=auto'
        alias vi='/opt/bin/squashfs-root/usr/bin/nvim'
        alias vim='/opt/bin/squashfs-root/usr/bin/nvim'

  - filesystem: "root"
    path: "/home/joe/.gitconfig"
    mode: 0644
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        [user]
            name = Joseph Salisbury
            email = salisbury.joseph@gmail.com
            signingkey = 1C6A41349CB55511

        [help]
            autocorrect = -1

        [alias]
            d = diff
            st = status --short --branch
            co = checkout
            lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
            b = branch

        [commit]
            gpgsign = true
            template = /home/joe/.gittemplate

        [credential]
            helper = store --file=/secrets/gitcredentials

        [url "https://github.com/"]
            insteadOf = git://github.com/

  - filesystem: "root"
    path: "/home/joe/.gittemplate"
    mode: 0644
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        # If this commit is applied, then it (e.g: Removes the foo)

        # Towards this issue

        # And this is _why_ we did it

  - filesystem: "root"
    path: "/home/joe/.tmux.conf"
    mode: 0644
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        # add shortcut to reload config file
        bind r source-file ~/.tmux.conf
        # change ctrl-d to detach
        bind-key -n C-d detach

        # enable utf8
        set -g utf8
        set-window-option -g utf8 on

        # make tmux display things in 256 colors
        set -g default-terminal "screen-256color"

        # colour bottom bar text
        set -g status-fg colour249

        # colour bottom bar
        set -g status-bg colour16

        # update status bar every half second
        set -g status-interval 1

        # bump right status bar length
        set -g status-right-length 100

        # add working directory and time to status bar
        set -g status-right "#(/home/joe/.tmux-right-status.sh)"

        # set escape-time low to help nvim
        set-option -sg escape-time 10

  - filesystem: "root"
    path: "/home/joe/.tmux-right-status.sh"
    mode: 0744
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        #!/bin/bash

        path="$(tmux display-message -p -F "#{pane_current_path}")"

        git_info=" "
        if [ -d ${path}/.git ]; then
            git_info=$(cd ${path}; echo -n " ( "; git rev-parse --abbrev-ref HEAD; $(git diff-index --quiet HEAD -- || echo "* "); echo -n ") ")
        fi

        kubectl_info=" "
        if kubectl config current-context > /dev/null 2>&1; then
            kubectl_info=$(echo -n " ( "; kubectl config current-context; echo -n " ) ")
        fi

        internet_status="$(cat /home/joe/.internet-status)"
        vpn_status="$(cat /home/joe/.vpn-status)"

        load="$(cat /proc/loadavg | awk '{print $1}')"

        echo ${path}${git_info}${kubectl_info}"( "${internet_status} / ${vpn_status}" )" ${load} $(date +"%H:%M")

  - filesystem: "root"
    path: "/home/joe/.internet-status"
    mode: 0644
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        down

  - filesystem: "root"
    path: "/home/joe/.vpn-status"
    mode: 0644
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        down

  - filesystem: "root"
    path: "/home/joe/.vimrc"
    mode: 0644
    user:
      name: joe
    group:
      name: joe
    contents:
      inline: |
        " reload if the file changes
        set autoread

systemd:
  units:
  - name: go.service
    enable: true
    contents: |
      [Unit]
      Description=go
      After=basic.target

      [Service]
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/usr/bin/mkdir -p /go/src/github.com/
      ExecStart=/usr/bin/chown -R joe:joe /go

      [Install]
      WantedBy=multi-user.target

  - name: opt-bin.service
    enable: true
    contents: |
      [Unit]
      Description=opt-bin

      [Service]
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/usr/bin/mkdir -p /opt/bin

      [Install]
      WantedBy=multi-user.target

  - name: get-tmux.service
    enable: true
    contents: |
      [Unit]
      Description=Get tmux
      After=network-online.target opt-bin.service
      Requires=network-online.target opt-bin.service

      [Service]
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/usr/bin/curl http://s.minos.io/archive/bifrost/x86_64/tmux-1.9a-1.tar.gz -o /opt/bin/tmux.tar.gz
      ExecStart=/usr/bin/tar xzf /opt/bin/tmux.tar.gz -C /opt/bin ./bin/tmux --strip-components=2
      ExecStart=/bin/rm /opt/bin/tmux.tar.gz

      [Install]
      WantedBy=multi-user.target

  - name: get-neovim.service
    enable: true
    contents: |
      [Unit]
      Description=Get neovim
      After=network-online.target opt-bin.service
      Requires=network-online.target opt-bin.service

      [Service]
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/usr/bin/curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
      ExecStart=/bin/chmod 777 /nvim.appimage
      ExecStart=/nvim.appimage --appimage-extract
      ExecStart=/usr/bin/mv /squashfs-root /opt/bin
      ExecStart=/bin/chmod 777 -R /opt/bin/squashfs-root/

      [Install]
      WantedBy=multi-user.target

  - name: get-kubectl.service
    enable: true
    contents: |
      [Unit]
      Description=Get kubectl
      After=network-online.target opt-bin.service
      Requires=network-online.target opt-bin.service

      [Service]
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/bin/bash -c 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl'
      ExecStart=/usr/bin/mv ./kubectl /opt/bin
      ExecStart=/bin/chmod +x /opt/bin/kubectl

      [Install]
      WantedBy=multi-user.target

  - name: get-opsctl.service
    enable: true
    contents: |
      [Unit]
      Description=Get opsctl
      After=network-online.target go.service
      Requires=network-online.target go.service

      [Service]
      Type=oneshot
      RemainAfterExit=true
      User=joe
      ExecStart=/usr/bin/mkdir -p /go/src/github.com/giantswarm
      ExecStart=/usr/bin/git clone https://github.com/giantswarm/opsctl /go/src/github.com/giantswarm/opsctl
      ExecStart=/usr/bin/docker run --rm -v /go:/go/ -v /tmp/go-cache:/root/.cache/go-build/ -w /go/src/github.com/giantswarm/opsctl golang go build

      [Install]
      WantedBy=multi-user.target

  - name: get-gsctl.service
    enable: true
    contents: |
      [Unit]
      Description=Get gsctl
      After=network-online.target go.service
      Requires=network-online.target go.service

      [Service]
      Type=oneshot
      RemainAfterExit=true
      User=joe
      ExecStart=/usr/bin/mkdir -p /go/src/github.com/giantswarm
      ExecStart=/usr/bin/git clone https://github.com/giantswarm/gsctl /go/src/github.com/giantswarm/gsctl
      ExecStart=/usr/bin/docker run --rm -v /go:/go/ -v /tmp/go-cache:/root/.cache/go-build/ -w /go/src/github.com/giantswarm/gsctl golang go build

      [Install]
      WantedBy=multi-user.target

  - name: openvpn.service
    enable: true
    contents: |
      [Unit]
      Description=OpenVPN
      After=network-online.target docker.service
      Requires=network-online.target docker.service

      [Service]
      Environment="OPENVPN_CONTAINER=openvpn"
      ExecStartPre=-/usr/bin/docker stop ${OPENVPN_CONTAINER}
      ExecStartPre=-/usr/bin/docker rm ${OPENVPN_CONTAINER}
      ExecStart=/usr/bin/docker run \
          --cap-add NET_ADMIN \
          --device /dev/net/tun \
          --name ${OPENVPN_CONTAINER} \
          -v /secrets/vpn.ovpn:/vpn/vpn.ovpn \
          --net=host \
          quay.io/josephsalisbury/openvpn:latest \
          --config /vpn/vpn.ovpn
      ExecStop=/usr/bin/docker stop ${OPENVPN_CONTAINER}
      ExecStopPost=/usr/bin/ip addr add dev tun0 local 10.0.255.94 peer 10.0.255.93

      [Install]
      WantedBy=multi-user.target

  - name: internet-watchdog.service
    enable: true
    contents: |
      [Unit]
      Description=Internet Watchdog

      [Service]
      ExecStart=/bin/bash -c 'while true; do if ping -c 1 8.8.8.8; then echo "up" > /home/joe/.internet-status; else echo "down" > /home/joe/.internet-status; fi; sleep 30; done'

      [Install]
      WantedBy=multi-user.target

  - name: openvpn-watchdog.service
    enable: true
    contents: |
      [Unit]
      Description=OpenVPN Watchdog

      [Service]
      ExecStart=/bin/bash -c 'while true; do if ping -c 1 10.0.253.1; then echo "up" > /home/joe/.vpn-status; else echo "down" > /home/joe/.vpn-status && sudo systemctl restart openvpn.service; fi; sleep 30; done'

      [Install]
      WantedBy=multi-user.target

  - name: locksmithd.service
    mask: true

  - name: update-engine.service
    mask: true
